/**
 * Do not edit this file it is auto-generated by io-utils / gen-api-models.
 * See https://github.com/pagopa/io-utils
 */
/* eslint-disable  */

import { withoutUndefinedValues } from "@pagopa/ts-commons/lib/types";
import {
  RequestParams,
  TypeofApiCall,
  TypeofApiParams,
  createFetchRequestForApi,
  ReplaceRequestParams
} from "@pagopa/ts-commons/lib/requests";
import { identity } from "fp-ts/lib/function";

import {
  SearchUsingPOSTT,
  searchUsingPOSTDefaultDecoder,
  FindPiiUsingGETT,
  findPiiUsingGETDefaultDecoder,
  SaveUsingPUTT,
  saveUsingPUTDefaultDecoder
} from "./requestTypes";

// This is a placeholder for undefined when dealing with object keys
// Typescript doesn't perform well when narrowing a union type which includes string and undefined
// (example: "foo" | "bar" | undefined)
// We use this as a placeholder for type parameters indicating "no key"
type __UNDEFINED_KEY = "_____";

export type ApiOperation = TypeofApiCall<SearchUsingPOSTT> &
  TypeofApiCall<FindPiiUsingGETT> &
  TypeofApiCall<SaveUsingPUTT>;

export type ParamKeys = keyof (TypeofApiParams<SearchUsingPOSTT> &
  TypeofApiParams<FindPiiUsingGETT> &
  TypeofApiParams<SaveUsingPUTT>);

/**
 * Defines an adapter for TypeofApiCall which omit one or more parameters in the signature
 * @param ApiT the type which defines the operation to expose
 * @param K the parameter to omit. undefined means no parameters will be omitted
 */
export type OmitApiCallParams<
  ApiT,
  K extends ParamKeys | __UNDEFINED_KEY = __UNDEFINED_KEY
> = (
  op: TypeofApiCall<ApiT>
) => K extends __UNDEFINED_KEY
  ? TypeofApiCall<ApiT>
  : TypeofApiCall<ReplaceRequestParams<ApiT, Omit<RequestParams<ApiT>, K>>>;

/**
 * Defines an adapter for TypeofApiCall which omit one or more parameters in the signature
 * @param ApiT the type which defines the operation to expose
 * @param K the parameter to omit. undefined means no parameters will be omitted
 */
export type WithDefaultsT<
  K extends ParamKeys | __UNDEFINED_KEY = __UNDEFINED_KEY
> = OmitApiCallParams<SearchUsingPOSTT | FindPiiUsingGETT | SaveUsingPUTT, K>;

/**
 * Defines a collection of api operations
 * @param K name of the parameters that the Clients masks from the operations
 */
export type Client<
  K extends ParamKeys | __UNDEFINED_KEY = __UNDEFINED_KEY
> = K extends __UNDEFINED_KEY
  ? {
      readonly searchUsingPOST: TypeofApiCall<SearchUsingPOSTT>;

      readonly findPiiUsingGET: TypeofApiCall<FindPiiUsingGETT>;

      readonly saveUsingPUT: TypeofApiCall<SaveUsingPUTT>;
    }
  : {
      readonly searchUsingPOST: TypeofApiCall<
        ReplaceRequestParams<
          SearchUsingPOSTT,
          Omit<RequestParams<SearchUsingPOSTT>, K>
        >
      >;

      readonly findPiiUsingGET: TypeofApiCall<
        ReplaceRequestParams<
          FindPiiUsingGETT,
          Omit<RequestParams<FindPiiUsingGETT>, K>
        >
      >;

      readonly saveUsingPUT: TypeofApiCall<
        ReplaceRequestParams<
          SaveUsingPUTT,
          Omit<RequestParams<SaveUsingPUTT>, K>
        >
      >;
    };

/**
 * Create an instance of a client
 * @param params hash map of parameters thata define the client:
 *  - baseUrl: the base url for every api call (required)
 *  - fetchApi: an implementation of the fetch() web API, depending on the platform (required)
 *  - basePath: optional path to be appended to the baseUrl
 *  - withDefaults: optional adapter to be applied to every operation, to omit some paramenters
 * @returns a collection of api operations
 */
export function createClient<K extends ParamKeys>(params: {
  baseUrl: string;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  fetchApi: typeof fetch;
  withDefaults: WithDefaultsT<K>;
  basePath?: string;
}): Client<K>;
export function createClient(params: {
  baseUrl: string;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  fetchApi: typeof fetch;
  withDefaults?: undefined;
  basePath?: string;
}): Client;
export function createClient<K extends ParamKeys>({
  baseUrl,
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  fetchApi,
  withDefaults,
  basePath = "/{basePath}"
}: {
  baseUrl: string;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  fetchApi: typeof fetch;
  withDefaults?: WithDefaultsT<K>;
  basePath?: string;
}) {
  const options = {
    baseUrl,
    fetchApi
  };

  const searchUsingPOSTT: ReplaceRequestParams<
    SearchUsingPOSTT,
    RequestParams<SearchUsingPOSTT>
  > = {
    method: "post",

    headers: ({ ["api_key"]: apiKey }) => ({
      "x-api-key": apiKey,

      "Content-Type": "application/json"
    }),
    response_decoder: searchUsingPOSTDefaultDecoder(),
    url: ({}) => `${basePath}/tokens/search`,

    body: ({ ["body"]: body }) =>
      body?.constructor?.name === "Readable" ||
      body?.constructor?.name === "ReadableStream"
        ? (body as ReadableStream)
        : body?.constructor?.name === "Buffer"
        ? (body as Buffer)
        : JSON.stringify(body),

    query: () => withoutUndefinedValues({})
  };
  const searchUsingPOST: TypeofApiCall<SearchUsingPOSTT> = createFetchRequestForApi(
    searchUsingPOSTT,
    options
  );

  const findPiiUsingGETT: ReplaceRequestParams<
    FindPiiUsingGETT,
    RequestParams<FindPiiUsingGETT>
  > = {
    method: "get",

    headers: ({ ["api_key"]: apiKey }) => ({
      "x-api-key": apiKey
    }),
    response_decoder: findPiiUsingGETDefaultDecoder(),
    url: ({ ["token"]: token }) => `${basePath}/tokens/${token}/pii`,

    query: () => withoutUndefinedValues({})
  };
  const findPiiUsingGET: TypeofApiCall<FindPiiUsingGETT> = createFetchRequestForApi(
    findPiiUsingGETT,
    options
  );

  const saveUsingPUTT: ReplaceRequestParams<
    SaveUsingPUTT,
    RequestParams<SaveUsingPUTT>
  > = {
    method: "put",

    headers: ({ ["api_key"]: apiKey }) => ({
      "x-api-key": apiKey,

      "Content-Type": "application/json"
    }),
    response_decoder: saveUsingPUTDefaultDecoder(),
    url: ({}) => `${basePath}/tokens`,

    body: ({ ["body"]: body }) =>
      body?.constructor?.name === "Readable" ||
      body?.constructor?.name === "ReadableStream"
        ? (body as ReadableStream)
        : body?.constructor?.name === "Buffer"
        ? (body as Buffer)
        : JSON.stringify(body),

    query: () => withoutUndefinedValues({})
  };
  const saveUsingPUT: TypeofApiCall<SaveUsingPUTT> = createFetchRequestForApi(
    saveUsingPUTT,
    options
  );

  return {
    searchUsingPOST: (withDefaults || identity)(searchUsingPOST),
    findPiiUsingGET: (withDefaults || identity)(findPiiUsingGET),
    saveUsingPUT: (withDefaults || identity)(saveUsingPUT)
  };
}
