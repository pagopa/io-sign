// DO NOT EDIT THIS FILE
// This file has been generated by gen-api-models
// eslint-disable sonar/max-union-size
// eslint-disable sonarjs/no-identical-functions

import * as t from "io-ts";

import * as r from "@pagopa/ts-commons/lib/requests";

import { PiiResource } from "./PiiResource";

import { TokenResource } from "./TokenResource";

/****************************************************************
 * searchUsingPOST
 */

// Request type definition
export type SearchUsingPOSTT = r.IPostApiRequestType<
  {
    readonly api_key: string;
    readonly body: PiiResource | ReadableStream<Uint8Array> | Buffer;
  },
  "Content-Type" | "x-api-key",
  never,
  | r.IResponseType<200, TokenResource, never>
  | r.IResponseType<400, undefined, never>
  | r.IResponseType<403, undefined, never>
  | r.IResponseType<404, undefined, never>
  | r.IResponseType<429, undefined, never>
>;

export const searchUsingPOSTDefaultResponses = {
  200: TokenResource,
  400: t.undefined,
  403: t.undefined,
  404: t.undefined,
  429: t.undefined
};

export type SearchUsingPOSTResponsesT<
  A0 = TokenResource,
  C0 = TokenResource,
  A1 = undefined,
  C1 = undefined,
  A2 = undefined,
  C2 = undefined,
  A3 = undefined,
  C3 = undefined,
  A4 = undefined,
  C4 = undefined
> = {
  200: t.Type<A0, C0>;
  400: t.Type<A1, C1>;
  403: t.Type<A2, C2>;
  404: t.Type<A3, C3>;
  429: t.Type<A4, C4>;
};

export function searchUsingPOSTDecoder<
  A0 = TokenResource,
  C0 = TokenResource,
  A1 = undefined,
  C1 = undefined,
  A2 = undefined,
  C2 = undefined,
  A3 = undefined,
  C3 = undefined,
  A4 = undefined,
  C4 = undefined
>(
  overrideTypes:
    | Partial<SearchUsingPOSTResponsesT<A0, C0, A1, C1, A2, C2, A3, C3, A4, C4>>
    | t.Type<A0, C0>
    | undefined = {}
): r.ResponseDecoder<
  | r.IResponseType<200, A0, never>
  | r.IResponseType<400, A1, never>
  | r.IResponseType<403, A2, never>
  | r.IResponseType<404, A3, never>
  | r.IResponseType<429, A4, never>
> {
  const isDecoder = (d: any): d is t.Type<A0, C0> =>
    typeof d["_A"] !== "undefined";

  const type = {
    ...((searchUsingPOSTDefaultResponses as unknown) as SearchUsingPOSTResponsesT<
      A0,
      C0,
      A1,
      C1,
      A2,
      C2,
      A3,
      C3,
      A4,
      C4
    >),
    ...(isDecoder(overrideTypes) ? { 200: overrideTypes } : overrideTypes)
  };

  const d200 = (type[200].name === "undefined"
    ? r.constantResponseDecoder<undefined, 200, never>(200, undefined)
    : r.ioResponseDecoder<
        200,
        typeof type[200]["_A"],
        typeof type[200]["_O"],
        never
      >(200, type[200])) as r.ResponseDecoder<r.IResponseType<200, A0, never>>;

  const d400 = (type[400].name === "undefined"
    ? r.constantResponseDecoder<undefined, 400, never>(400, undefined)
    : r.ioResponseDecoder<
        400,
        typeof type[400]["_A"],
        typeof type[400]["_O"],
        never
      >(400, type[400])) as r.ResponseDecoder<r.IResponseType<400, A1, never>>;

  const d403 = (type[403].name === "undefined"
    ? r.constantResponseDecoder<undefined, 403, never>(403, undefined)
    : r.ioResponseDecoder<
        403,
        typeof type[403]["_A"],
        typeof type[403]["_O"],
        never
      >(403, type[403])) as r.ResponseDecoder<r.IResponseType<403, A2, never>>;

  const d404 = (type[404].name === "undefined"
    ? r.constantResponseDecoder<undefined, 404, never>(404, undefined)
    : r.ioResponseDecoder<
        404,
        typeof type[404]["_A"],
        typeof type[404]["_O"],
        never
      >(404, type[404])) as r.ResponseDecoder<r.IResponseType<404, A3, never>>;

  const d429 = (type[429].name === "undefined"
    ? r.constantResponseDecoder<undefined, 429, never>(429, undefined)
    : r.ioResponseDecoder<
        429,
        typeof type[429]["_A"],
        typeof type[429]["_O"],
        never
      >(429, type[429])) as r.ResponseDecoder<r.IResponseType<429, A4, never>>;

  return r.composeResponseDecoders(
    r.composeResponseDecoders(
      r.composeResponseDecoders(r.composeResponseDecoders(d200, d400), d403),
      d404
    ),
    d429
  );
}

// Decodes the success response with the type defined in the specs
export const searchUsingPOSTDefaultDecoder = () => searchUsingPOSTDecoder();

/****************************************************************
 * findPiiUsingGET
 */

// Request type definition
export type FindPiiUsingGETT = r.IGetApiRequestType<
  { readonly api_key: string; readonly token: string },
  "x-api-key",
  never,
  | r.IResponseType<200, PiiResource, never>
  | r.IResponseType<400, undefined, never>
  | r.IResponseType<403, undefined, never>
  | r.IResponseType<404, undefined, never>
  | r.IResponseType<429, undefined, never>
>;

export const findPiiUsingGETDefaultResponses = {
  200: PiiResource,
  400: t.undefined,
  403: t.undefined,
  404: t.undefined,
  429: t.undefined
};

export type FindPiiUsingGETResponsesT<
  A0 = PiiResource,
  C0 = PiiResource,
  A1 = undefined,
  C1 = undefined,
  A2 = undefined,
  C2 = undefined,
  A3 = undefined,
  C3 = undefined,
  A4 = undefined,
  C4 = undefined
> = {
  200: t.Type<A0, C0>;
  400: t.Type<A1, C1>;
  403: t.Type<A2, C2>;
  404: t.Type<A3, C3>;
  429: t.Type<A4, C4>;
};

export function findPiiUsingGETDecoder<
  A0 = PiiResource,
  C0 = PiiResource,
  A1 = undefined,
  C1 = undefined,
  A2 = undefined,
  C2 = undefined,
  A3 = undefined,
  C3 = undefined,
  A4 = undefined,
  C4 = undefined
>(
  overrideTypes:
    | Partial<FindPiiUsingGETResponsesT<A0, C0, A1, C1, A2, C2, A3, C3, A4, C4>>
    | t.Type<A0, C0>
    | undefined = {}
): r.ResponseDecoder<
  | r.IResponseType<200, A0, never>
  | r.IResponseType<400, A1, never>
  | r.IResponseType<403, A2, never>
  | r.IResponseType<404, A3, never>
  | r.IResponseType<429, A4, never>
> {
  const isDecoder = (d: any): d is t.Type<A0, C0> =>
    typeof d["_A"] !== "undefined";

  const type = {
    ...((findPiiUsingGETDefaultResponses as unknown) as FindPiiUsingGETResponsesT<
      A0,
      C0,
      A1,
      C1,
      A2,
      C2,
      A3,
      C3,
      A4,
      C4
    >),
    ...(isDecoder(overrideTypes) ? { 200: overrideTypes } : overrideTypes)
  };

  const d200 = (type[200].name === "undefined"
    ? r.constantResponseDecoder<undefined, 200, never>(200, undefined)
    : r.ioResponseDecoder<
        200,
        typeof type[200]["_A"],
        typeof type[200]["_O"],
        never
      >(200, type[200])) as r.ResponseDecoder<r.IResponseType<200, A0, never>>;

  const d400 = (type[400].name === "undefined"
    ? r.constantResponseDecoder<undefined, 400, never>(400, undefined)
    : r.ioResponseDecoder<
        400,
        typeof type[400]["_A"],
        typeof type[400]["_O"],
        never
      >(400, type[400])) as r.ResponseDecoder<r.IResponseType<400, A1, never>>;

  const d403 = (type[403].name === "undefined"
    ? r.constantResponseDecoder<undefined, 403, never>(403, undefined)
    : r.ioResponseDecoder<
        403,
        typeof type[403]["_A"],
        typeof type[403]["_O"],
        never
      >(403, type[403])) as r.ResponseDecoder<r.IResponseType<403, A2, never>>;

  const d404 = (type[404].name === "undefined"
    ? r.constantResponseDecoder<undefined, 404, never>(404, undefined)
    : r.ioResponseDecoder<
        404,
        typeof type[404]["_A"],
        typeof type[404]["_O"],
        never
      >(404, type[404])) as r.ResponseDecoder<r.IResponseType<404, A3, never>>;

  const d429 = (type[429].name === "undefined"
    ? r.constantResponseDecoder<undefined, 429, never>(429, undefined)
    : r.ioResponseDecoder<
        429,
        typeof type[429]["_A"],
        typeof type[429]["_O"],
        never
      >(429, type[429])) as r.ResponseDecoder<r.IResponseType<429, A4, never>>;

  return r.composeResponseDecoders(
    r.composeResponseDecoders(
      r.composeResponseDecoders(r.composeResponseDecoders(d200, d400), d403),
      d404
    ),
    d429
  );
}

// Decodes the success response with the type defined in the specs
export const findPiiUsingGETDefaultDecoder = () => findPiiUsingGETDecoder();

/****************************************************************
 * saveUsingPUT
 */

// Request type definition
export type SaveUsingPUTT = r.IPutApiRequestType<
  {
    readonly api_key: string;
    readonly body: PiiResource | ReadableStream<Uint8Array> | Buffer;
  },
  "Content-Type" | "x-api-key",
  never,
  | r.IResponseType<200, TokenResource, never>
  | r.IResponseType<400, undefined, never>
  | r.IResponseType<403, undefined, never>
  | r.IResponseType<404, undefined, never>
  | r.IResponseType<429, undefined, never>
>;

export const saveUsingPUTDefaultResponses = {
  200: TokenResource,
  400: t.undefined,
  403: t.undefined,
  404: t.undefined,
  429: t.undefined
};

export type SaveUsingPUTResponsesT<
  A0 = TokenResource,
  C0 = TokenResource,
  A1 = undefined,
  C1 = undefined,
  A2 = undefined,
  C2 = undefined,
  A3 = undefined,
  C3 = undefined,
  A4 = undefined,
  C4 = undefined
> = {
  200: t.Type<A0, C0>;
  400: t.Type<A1, C1>;
  403: t.Type<A2, C2>;
  404: t.Type<A3, C3>;
  429: t.Type<A4, C4>;
};

export function saveUsingPUTDecoder<
  A0 = TokenResource,
  C0 = TokenResource,
  A1 = undefined,
  C1 = undefined,
  A2 = undefined,
  C2 = undefined,
  A3 = undefined,
  C3 = undefined,
  A4 = undefined,
  C4 = undefined
>(
  overrideTypes:
    | Partial<SaveUsingPUTResponsesT<A0, C0, A1, C1, A2, C2, A3, C3, A4, C4>>
    | t.Type<A0, C0>
    | undefined = {}
): r.ResponseDecoder<
  | r.IResponseType<200, A0, never>
  | r.IResponseType<400, A1, never>
  | r.IResponseType<403, A2, never>
  | r.IResponseType<404, A3, never>
  | r.IResponseType<429, A4, never>
> {
  const isDecoder = (d: any): d is t.Type<A0, C0> =>
    typeof d["_A"] !== "undefined";

  const type = {
    ...((saveUsingPUTDefaultResponses as unknown) as SaveUsingPUTResponsesT<
      A0,
      C0,
      A1,
      C1,
      A2,
      C2,
      A3,
      C3,
      A4,
      C4
    >),
    ...(isDecoder(overrideTypes) ? { 200: overrideTypes } : overrideTypes)
  };

  const d200 = (type[200].name === "undefined"
    ? r.constantResponseDecoder<undefined, 200, never>(200, undefined)
    : r.ioResponseDecoder<
        200,
        typeof type[200]["_A"],
        typeof type[200]["_O"],
        never
      >(200, type[200])) as r.ResponseDecoder<r.IResponseType<200, A0, never>>;

  const d400 = (type[400].name === "undefined"
    ? r.constantResponseDecoder<undefined, 400, never>(400, undefined)
    : r.ioResponseDecoder<
        400,
        typeof type[400]["_A"],
        typeof type[400]["_O"],
        never
      >(400, type[400])) as r.ResponseDecoder<r.IResponseType<400, A1, never>>;

  const d403 = (type[403].name === "undefined"
    ? r.constantResponseDecoder<undefined, 403, never>(403, undefined)
    : r.ioResponseDecoder<
        403,
        typeof type[403]["_A"],
        typeof type[403]["_O"],
        never
      >(403, type[403])) as r.ResponseDecoder<r.IResponseType<403, A2, never>>;

  const d404 = (type[404].name === "undefined"
    ? r.constantResponseDecoder<undefined, 404, never>(404, undefined)
    : r.ioResponseDecoder<
        404,
        typeof type[404]["_A"],
        typeof type[404]["_O"],
        never
      >(404, type[404])) as r.ResponseDecoder<r.IResponseType<404, A3, never>>;

  const d429 = (type[429].name === "undefined"
    ? r.constantResponseDecoder<undefined, 429, never>(429, undefined)
    : r.ioResponseDecoder<
        429,
        typeof type[429]["_A"],
        typeof type[429]["_O"],
        never
      >(429, type[429])) as r.ResponseDecoder<r.IResponseType<429, A4, never>>;

  return r.composeResponseDecoders(
    r.composeResponseDecoders(
      r.composeResponseDecoders(r.composeResponseDecoders(d200, d400), d403),
      d404
    ),
    d429
  );
}

// Decodes the success response with the type defined in the specs
export const saveUsingPUTDefaultDecoder = () => saveUsingPUTDecoder();
