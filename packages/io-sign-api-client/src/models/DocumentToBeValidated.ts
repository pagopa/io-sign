/* tslint:disable */
/* eslint-disable */
/**
 * Firma con IO - Issuer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DocumentMetadata } from './DocumentMetadata';
import {
    DocumentMetadataFromJSON,
    DocumentMetadataFromJSONTyped,
    DocumentMetadataToJSON,
} from './DocumentMetadata';

/**
 * 
 * @export
 * @interface DocumentToBeValidated
 */
export interface DocumentToBeValidated {
    /**
     * Entity Id
     * @type {string}
     * @memberof DocumentToBeValidated
     */
    id: string;
    /**
     * 
     * @type {DocumentMetadata}
     * @memberof DocumentToBeValidated
     */
    metadata: DocumentMetadata;
    /**
     * A date-time field in ISO-8601 format and UTC timezone.
     * @type {string}
     * @memberof DocumentToBeValidated
     */
    createdAt: string;
    /**
     * A date-time field in ISO-8601 format and UTC timezone.
     * @type {string}
     * @memberof DocumentToBeValidated
     */
    updatedAt: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentToBeValidated
     */
    status: DocumentToBeValidatedStatusEnum;
    /**
     * A date-time field in ISO-8601 format and UTC timezone.
     * @type {string}
     * @memberof DocumentToBeValidated
     */
    uploadedAt: string;
}


/**
 * @export
 */
export const DocumentToBeValidatedStatusEnum = {
    WaitForValidation: 'WAIT_FOR_VALIDATION'
} as const;
export type DocumentToBeValidatedStatusEnum = typeof DocumentToBeValidatedStatusEnum[keyof typeof DocumentToBeValidatedStatusEnum];


/**
 * Check if a given object implements the DocumentToBeValidated interface.
 */
export function instanceOfDocumentToBeValidated(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "metadata" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "uploadedAt" in value;

    return isInstance;
}

export function DocumentToBeValidatedFromJSON(json: any): DocumentToBeValidated {
    return DocumentToBeValidatedFromJSONTyped(json, false);
}

export function DocumentToBeValidatedFromJSONTyped(json: any, ignoreDiscriminator: boolean): DocumentToBeValidated {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'metadata': DocumentMetadataFromJSON(json['metadata']),
        'createdAt': json['created_at'],
        'updatedAt': json['updated_at'],
        'status': json['status'],
        'uploadedAt': json['uploaded_at'],
    };
}

export function DocumentToBeValidatedToJSON(value?: DocumentToBeValidated | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'metadata': DocumentMetadataToJSON(value.metadata),
        'created_at': value.createdAt,
        'updated_at': value.updatedAt,
        'status': value.status,
        'uploaded_at': value.uploadedAt,
    };
}

