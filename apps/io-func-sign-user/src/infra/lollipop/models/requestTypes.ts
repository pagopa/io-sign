// DO NOT EDIT THIS FILE
// This file has been generated by gen-api-models
// eslint-disable sonar/max-union-size
// eslint-disable sonarjs/no-identical-functions

import * as t from "io-ts";

import * as r from "@pagopa/ts-commons/lib/requests";

import { AssertionRef } from "./AssertionRef";

import { LollipopAuthBearer } from "./LollipopAuthBearer";

import { LCUserInfo } from "./LCUserInfo";

import { ProblemJson } from "./ProblemJson";

/****************************************************************
 * getAssertion
 */

// Request type definition
export type GetAssertionT = r.IGetApiRequestType<
  {
    readonly ApiKeyAuth: string;
    readonly assertion_ref: AssertionRef;
    readonly "x-pagopa-lollipop-auth": LollipopAuthBearer;
  },
  "Ocp-Apim-Subscription-Key",
  never,
  | r.IResponseType<200, LCUserInfo, never>
  | r.IResponseType<400, ProblemJson, never>
  | r.IResponseType<401, undefined, never>
  | r.IResponseType<403, undefined, never>
  | r.IResponseType<404, ProblemJson, never>
  | r.IResponseType<410, undefined, never>
  | r.IResponseType<500, ProblemJson, never>
>;

export const getAssertionDefaultResponses = {
  200: LCUserInfo,
  400: ProblemJson,
  401: t.undefined,
  403: t.undefined,
  404: ProblemJson,
  410: t.undefined,
  500: ProblemJson
};

export type GetAssertionResponsesT<
  A0 = LCUserInfo,
  C0 = LCUserInfo,
  A1 = ProblemJson,
  C1 = ProblemJson,
  A2 = undefined,
  C2 = undefined,
  A3 = undefined,
  C3 = undefined,
  A4 = ProblemJson,
  C4 = ProblemJson,
  A5 = undefined,
  C5 = undefined,
  A6 = ProblemJson,
  C6 = ProblemJson
> = {
  200: t.Type<A0, C0>;
  400: t.Type<A1, C1>;
  401: t.Type<A2, C2>;
  403: t.Type<A3, C3>;
  404: t.Type<A4, C4>;
  410: t.Type<A5, C5>;
  500: t.Type<A6, C6>;
};

export function getAssertionDecoder<
  A0 = LCUserInfo,
  C0 = LCUserInfo,
  A1 = ProblemJson,
  C1 = ProblemJson,
  A2 = undefined,
  C2 = undefined,
  A3 = undefined,
  C3 = undefined,
  A4 = ProblemJson,
  C4 = ProblemJson,
  A5 = undefined,
  C5 = undefined,
  A6 = ProblemJson,
  C6 = ProblemJson
>(
  overrideTypes:
    | Partial<
        GetAssertionResponsesT<
          A0,
          C0,
          A1,
          C1,
          A2,
          C2,
          A3,
          C3,
          A4,
          C4,
          A5,
          C5,
          A6,
          C6
        >
      >
    | t.Type<A0, C0>
    | undefined = {}
): r.ResponseDecoder<
  | r.IResponseType<200, A0, never>
  | r.IResponseType<400, A1, never>
  | r.IResponseType<401, A2, never>
  | r.IResponseType<403, A3, never>
  | r.IResponseType<404, A4, never>
  | r.IResponseType<410, A5, never>
  | r.IResponseType<500, A6, never>
> {
  const isDecoder = (d: any): d is t.Type<A0, C0> =>
    typeof d["_A"] !== "undefined";

  const type = {
    ...((getAssertionDefaultResponses as unknown) as GetAssertionResponsesT<
      A0,
      C0,
      A1,
      C1,
      A2,
      C2,
      A3,
      C3,
      A4,
      C4,
      A5,
      C5,
      A6,
      C6
    >),
    ...(isDecoder(overrideTypes) ? { 200: overrideTypes } : overrideTypes)
  };

  const d200 = (type[200].name === "undefined"
    ? r.constantResponseDecoder<undefined, 200, never>(200, undefined)
    : r.ioResponseDecoder<
        200,
        typeof type[200]["_A"],
        typeof type[200]["_O"],
        never
      >(200, type[200])) as r.ResponseDecoder<r.IResponseType<200, A0, never>>;

  const d400 = (type[400].name === "undefined"
    ? r.constantResponseDecoder<undefined, 400, never>(400, undefined)
    : r.ioResponseDecoder<
        400,
        typeof type[400]["_A"],
        typeof type[400]["_O"],
        never
      >(400, type[400])) as r.ResponseDecoder<r.IResponseType<400, A1, never>>;

  const d401 = (type[401].name === "undefined"
    ? r.constantResponseDecoder<undefined, 401, never>(401, undefined)
    : r.ioResponseDecoder<
        401,
        typeof type[401]["_A"],
        typeof type[401]["_O"],
        never
      >(401, type[401])) as r.ResponseDecoder<r.IResponseType<401, A2, never>>;

  const d403 = (type[403].name === "undefined"
    ? r.constantResponseDecoder<undefined, 403, never>(403, undefined)
    : r.ioResponseDecoder<
        403,
        typeof type[403]["_A"],
        typeof type[403]["_O"],
        never
      >(403, type[403])) as r.ResponseDecoder<r.IResponseType<403, A3, never>>;

  const d404 = (type[404].name === "undefined"
    ? r.constantResponseDecoder<undefined, 404, never>(404, undefined)
    : r.ioResponseDecoder<
        404,
        typeof type[404]["_A"],
        typeof type[404]["_O"],
        never
      >(404, type[404])) as r.ResponseDecoder<r.IResponseType<404, A4, never>>;

  const d410 = (type[410].name === "undefined"
    ? r.constantResponseDecoder<undefined, 410, never>(410, undefined)
    : r.ioResponseDecoder<
        410,
        typeof type[410]["_A"],
        typeof type[410]["_O"],
        never
      >(410, type[410])) as r.ResponseDecoder<r.IResponseType<410, A5, never>>;

  const d500 = (type[500].name === "undefined"
    ? r.constantResponseDecoder<undefined, 500, never>(500, undefined)
    : r.ioResponseDecoder<
        500,
        typeof type[500]["_A"],
        typeof type[500]["_O"],
        never
      >(500, type[500])) as r.ResponseDecoder<r.IResponseType<500, A6, never>>;

  return r.composeResponseDecoders(
    r.composeResponseDecoders(
      r.composeResponseDecoders(
        r.composeResponseDecoders(
          r.composeResponseDecoders(
            r.composeResponseDecoders(d200, d400),
            d401
          ),
          d403
        ),
        d404
      ),
      d410
    ),
    d500
  );
}

// Decodes the success response with the type defined in the specs
export const getAssertionDefaultDecoder = () => getAssertionDecoder();
