openapi: 3.0.3
info:
  title: IO Sign - User API
  version: 0.0.1
security:
  - FunctionsKey: []
paths:
  /qtsp/clauses/filled_document:
    post:
      operationId: createFilledDocument
      summary: Create a filled document for QTSP. The caller of this API is expected to poll on it since the endpoint will return 404 until the ToS document gets processed.
      tags:
        - QTSP Clauses
      parameters:
        - in: header
          name: x-iosign-signer-id
          schema:
            type: string
            description: Signer Id
            minLength: 1
            example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateFilledDocumentBody"
      responses:
        "201":
          description: Filled document created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilledDocumentDetailView"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/Unexpected"

  /signers:
    post:
      operationId: getSignerByFiscalCode
      tags:
        - Signer
      summary: Get Signer By Fiscal Code
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetSignerByFiscalCodeBody"
      responses:
        "200":
          description: The Signer detail
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignerDetailView"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/Unexpected"

  /info:
    get:
      operationId: getInfo
      responses:
        "200":
          description: Used to check if the function is active
          content:
            application/json:
              schema:
                type: string
                example: "It works"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/Unexpected"

  /qtsp/clauses:
    get:
      operationId: getQtspClausesMetadata
      summary: Get clauses list and MRC from QTSP
      tags:
        - QTSP Clauses
      responses:
        "200":
          description: The QTSP clauses list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QtspClausesMetadataDetailView"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

components:
  securitySchemes:
    FunctionsKey:
      type: apiKey
      name: X-Functions-Key
      in: header

  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProblemDetail"

    BadRequest:
      description: Validation error on body
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProblemDetail"

    Forbidden:
      description: You don't have enough privileges to perform this action
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProblemDetail"

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProblemDetail"

    TooManyRequests:
      description: Too Many Requests
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProblemDetail"

    Unexpected:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProblemDetail"

  schemas:
    ProblemDetail:
      type: object
      properties:
        type:
          type: string
          format: uri
          description: |-
            An absolute URI that identifies the problem type. When dereferenced,
            it SHOULD provide human-readable documentation for the problem type
            (e.g., using HTML).
          default: about:blank
          example: https://example.com/problem/constraint-violation
        title:
          type: string
          description: >-
            A short, summary of the problem type. Written in english and
            readable

            for engineers (usually not suited for non technical stakeholders and

            not localized); example: Service Unavailable
        status:
          type: integer
          format: int32
          description: >-
            The HTTP status code generated by the origin server for this
            occurrence of the problem.
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
          example: 200
        detail:
          type: string
          description: |-
            A human readable explanation specific to this occurrence of the
            problem.
          example: There was an error processing the request
        instance:
          type: string
          format: uri
          description: >-
            An absolute URI that identifies the specific occurrence of the
            problem. It may or may not yield further information if
            dereferenced.
    Timestamp:
      type: string
      format: UTCISODateFromString
      description: A date-time field in ISO-8601 format and UTC timezone.
      x-import: "@pagopa/ts-commons/lib/dates"
      example: "2018-10-13T00:00:00.000Z"

    Id:
      type: string
      description: Entity Id
      minLength: 1
      example: 01ARZ3NDEKTSV4RRFFQ69G5FAV

    FiscalCode:
      type: string
      description: User's fiscal code.
      format: FiscalCode
      x-import: "@pagopa/ts-commons/lib/strings"
      example: SPNDNL80R13C555X

    Email:
      type: string
      description: User's email.
      format: email
      example: me@example.com

    CreateFilledDocumentBody:
      type: object
      properties:
        document_url:
          type: string
          minLength: 1
          format: url
        email:
          $ref: "#/components/schemas/Email"
        name:
          type: string
          minLength: 1
        family_name:
          type: string
          minLength: 1
      required:
        - document_url
        - email
        - name
        - family_name

    FilledDocumentDetailView:
      type: object
      properties:
        filled_document_url:
          type: string
          format: url
      required:
        - filled_document_url

    GetSignerByFiscalCodeBody:
      type: object
      properties:
        fiscal_code:
          $ref: "#/components/schemas/FiscalCode"
      required:
        - fiscal_code

    SignerDetailView:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
      required:
        - id

    QtspClause:
      type: object
      properties:
        text:
          type: string
          minLength: 1
      required:
        - text

    QtspClausesMetadataDetailView:
      type: object
      properties:
        clauses:
          type: array
          items:
            $ref: "#/components/schemas/QtspClause"
          minItems: 1
          uniqueItems: true
        document_url:
          type: string
          format: url
        privacy_url:
          type: string
          format: url
        privacy_text:
          type: string
          minLength: 1
        terms_and_conditions_url:
          type: string
          format: url
        nonce:
          type: string
          format: base64
          minLength: 1
